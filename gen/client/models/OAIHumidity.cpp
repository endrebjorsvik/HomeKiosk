/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHumidity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHumidity::OAIHumidity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHumidity::OAIHumidity() {
    this->initializeModel();
}

OAIHumidity::~OAIHumidity() {}

void OAIHumidity::initializeModel() {

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_relative_humidity_isSet = false;
    m_relative_humidity_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIHumidity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHumidity::fromJsonObject(QJsonObject json) {

    m_temperature_isValid = ::OpenAPI::fromJsonValue(temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_relative_humidity_isValid = ::OpenAPI::fromJsonValue(relative_humidity, json[QString("relativeHumidity")]);
    m_relative_humidity_isSet = !json[QString("relativeHumidity")].isNull() && m_relative_humidity_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIHumidity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHumidity::asJsonObject() const {
    QJsonObject obj;
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(temperature));
    }
    if (m_relative_humidity_isSet) {
        obj.insert(QString("relativeHumidity"), ::OpenAPI::toJsonValue(relative_humidity));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(update_time));
    }
    return obj;
}

float OAIHumidity::getTemperature() const {
    return temperature;
}
void OAIHumidity::setTemperature(const float &temperature) {
    this->temperature = temperature;
    this->m_temperature_isSet = true;
}

float OAIHumidity::getRelativeHumidity() const {
    return relative_humidity;
}
void OAIHumidity::setRelativeHumidity(const float &relative_humidity) {
    this->relative_humidity = relative_humidity;
    this->m_relative_humidity_isSet = true;
}

QDateTime OAIHumidity::getUpdateTime() const {
    return update_time;
}
void OAIHumidity::setUpdateTime(const QDateTime &update_time) {
    this->update_time = update_time;
    this->m_update_time_isSet = true;
}

bool OAIHumidity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_humidity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHumidity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
