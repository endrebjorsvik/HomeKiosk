/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterPresentEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterPresentEvent::OAIWaterPresentEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterPresentEvent::OAIWaterPresentEvent() {
    this->initializeModel();
}

OAIWaterPresentEvent::~OAIWaterPresentEvent() {}

void OAIWaterPresentEvent::initializeModel() {

    m_water_present_isSet = false;
    m_water_present_isValid = false;
}

void OAIWaterPresentEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterPresentEvent::fromJsonObject(QJsonObject json) {

    m_water_present_isValid = ::OpenAPI::fromJsonValue(water_present, json[QString("waterPresent")]);
    m_water_present_isSet = !json[QString("waterPresent")].isNull() && m_water_present_isValid;
}

QString OAIWaterPresentEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterPresentEvent::asJsonObject() const {
    QJsonObject obj;
    if (water_present.isSet()) {
        obj.insert(QString("waterPresent"), ::OpenAPI::toJsonValue(water_present));
    }
    return obj;
}

OAIWaterPresent OAIWaterPresentEvent::getWaterPresent() const {
    return water_present;
}
void OAIWaterPresentEvent::setWaterPresent(const OAIWaterPresent &water_present) {
    this->water_present = water_present;
    this->m_water_present_isSet = true;
}

bool OAIWaterPresentEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (water_present.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterPresentEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
