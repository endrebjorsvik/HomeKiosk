/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200_5.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIInline_response_200_5::OAIInline_response_200_5(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200_5::OAIInline_response_200_5() {
    this->init();
}

OAIInline_response_200_5::~OAIInline_response_200_5() {

}

void
OAIInline_response_200_5::init() {
    
    m_metrics_isSet = false;
    m_metrics_isValid = false;
    }

void
OAIInline_response_200_5::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200_5::fromJsonObject(QJsonObject json) {
    
    m_metrics_isValid = ::OpenAPI::fromJsonValue(metrics, json[QString("metrics")]);
    
    
}

QString
OAIInline_response_200_5::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200_5::asJsonObject() const {
    QJsonObject obj;
	if(metrics.isSet()){
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(metrics));
    }
    return obj;
}


OAIDataConnectorMetrics
OAIInline_response_200_5::getMetrics() const {
    return metrics;
}
void
OAIInline_response_200_5::setMetrics(const OAIDataConnectorMetrics &metrics) {
    this->metrics = metrics;
    this->m_metrics_isSet = true;
}

bool
OAIInline_response_200_5::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(metrics.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200_5::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

