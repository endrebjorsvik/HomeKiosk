/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIConnectionLatencyEvent.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIConnectionLatencyEvent::OAIConnectionLatencyEvent(QString json) {
    this->init();
    this->fromJson(json);
}

OAIConnectionLatencyEvent::OAIConnectionLatencyEvent() {
    this->init();
}

OAIConnectionLatencyEvent::~OAIConnectionLatencyEvent() {

}

void
OAIConnectionLatencyEvent::init() {
    
    m_latency_status_isSet = false;
    m_latency_status_isValid = false;
    }

void
OAIConnectionLatencyEvent::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIConnectionLatencyEvent::fromJsonObject(QJsonObject json) {
    
    m_latency_status_isValid = ::OpenAPI::fromJsonValue(latency_status, json[QString("latencyStatus")]);
    
    
}

QString
OAIConnectionLatencyEvent::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIConnectionLatencyEvent::asJsonObject() const {
    QJsonObject obj;
	if(latency_status.isSet()){
        obj.insert(QString("latencyStatus"), ::OpenAPI::toJsonValue(latency_status));
    }
    return obj;
}


OAIConnectionLatency
OAIConnectionLatencyEvent::getLatencyStatus() const {
    return latency_status;
}
void
OAIConnectionLatencyEvent::setLatencyStatus(const OAIConnectionLatency &latency_status) {
    this->latency_status = latency_status;
    this->m_latency_status_isSet = true;
}

bool
OAIConnectionLatencyEvent::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(latency_status.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIConnectionLatencyEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

