/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIEthernetStatus.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIEthernetStatus::OAIEthernetStatus(QString json) {
    this->init();
    this->fromJson(json);
}

OAIEthernetStatus::OAIEthernetStatus() {
    this->init();
}

OAIEthernetStatus::~OAIEthernetStatus() {

}

void
OAIEthernetStatus::init() {
    
    m_mac_address_isSet = false;
    m_mac_address_isValid = false;
    
    m_ip_address_isSet = false;
    m_ip_address_isValid = false;
    
    m_errors_isSet = false;
    m_errors_isValid = false;
    
    m_update_time_isSet = false;
    m_update_time_isValid = false;
    }

void
OAIEthernetStatus::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIEthernetStatus::fromJsonObject(QJsonObject json) {
    
    m_mac_address_isValid = ::OpenAPI::fromJsonValue(mac_address, json[QString("macAddress")]);
    
    
    m_ip_address_isValid = ::OpenAPI::fromJsonValue(ip_address, json[QString("ipAddress")]);
    
    
    
    m_errors_isValid = ::OpenAPI::fromJsonValue(errors, json[QString("errors")]);
    
    m_update_time_isValid = ::OpenAPI::fromJsonValue(update_time, json[QString("updateTime")]);
    
    
}

QString
OAIEthernetStatus::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIEthernetStatus::asJsonObject() const {
    QJsonObject obj;
	if(m_mac_address_isSet){
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(mac_address));
    }
	if(m_ip_address_isSet){
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(ip_address));
    }
	
    if(errors.size() > 0){
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(errors));
    } 
	if(m_update_time_isSet){
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(update_time));
    }
    return obj;
}


QString
OAIEthernetStatus::getMacAddress() const {
    return mac_address;
}
void
OAIEthernetStatus::setMacAddress(const QString &mac_address) {
    this->mac_address = mac_address;
    this->m_mac_address_isSet = true;
}


QString
OAIEthernetStatus::getIpAddress() const {
    return ip_address;
}
void
OAIEthernetStatus::setIpAddress(const QString &ip_address) {
    this->ip_address = ip_address;
    this->m_ip_address_isSet = true;
}


QList<OAIErrorMessage>
OAIEthernetStatus::getErrors() const {
    return errors;
}
void
OAIEthernetStatus::setErrors(const QList<OAIErrorMessage> &errors) {
    this->errors = errors;
    this->m_errors_isSet = true;
}


QDateTime
OAIEthernetStatus::getUpdateTime() const {
    return update_time;
}
void
OAIEthernetStatus::setUpdateTime(const QDateTime &update_time) {
    this->update_time = update_time;
    this->m_update_time_isSet = true;
}

bool
OAIEthernetStatus::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_mac_address_isSet){ isObjectUpdated = true; break;}
    
        if(m_ip_address_isSet){ isObjectUpdated = true; break;}
    
        if(errors.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_update_time_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIEthernetStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

