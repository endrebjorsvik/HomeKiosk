/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIDataConnector.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIDataConnector::OAIDataConnector(QString json) {
    this->init();
    this->fromJson(json);
}

OAIDataConnector::OAIDataConnector() {
    this->init();
}

OAIDataConnector::~OAIDataConnector() {

}

void
OAIDataConnector::init() {
    
    m_name_isSet = false;
    m_name_isValid = false;
    
    m_display_name_isSet = false;
    m_display_name_isValid = false;
    
    m_type_isSet = false;
    m_type_isValid = false;
    
    m_status_isSet = false;
    m_status_isValid = false;
    
    m_events_isSet = false;
    m_events_isValid = false;
    
    m_labels_isSet = false;
    m_labels_isValid = false;
    
    m_http_config_isSet = false;
    m_http_config_isValid = false;
    }

void
OAIDataConnector::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIDataConnector::fromJsonObject(QJsonObject json) {
    
    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    
    m_display_name_isValid = ::OpenAPI::fromJsonValue(display_name, json[QString("displayName")]);
    
    
    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    
    
    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    
    
    
    m_events_isValid = ::OpenAPI::fromJsonValue(events, json[QString("events")]);
    
    
    m_labels_isValid = ::OpenAPI::fromJsonValue(labels, json[QString("labels")]);
    
    m_http_config_isValid = ::OpenAPI::fromJsonValue(http_config, json[QString("httpConfig")]);
    
    
}

QString
OAIDataConnector::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIDataConnector::asJsonObject() const {
    QJsonObject obj;
	if(m_name_isSet){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(m_display_name_isSet){
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(display_name));
    }
	if(m_type_isSet){
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
	if(m_status_isSet){
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
	
    if(events.size() > 0){
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(events));
    } 
	
    if(labels.size() > 0){
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(labels));
    } 
	if(http_config.isSet()){
        obj.insert(QString("httpConfig"), ::OpenAPI::toJsonValue(http_config));
    }
    return obj;
}


QString
OAIDataConnector::getName() const {
    return name;
}
void
OAIDataConnector::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}


QString
OAIDataConnector::getDisplayName() const {
    return display_name;
}
void
OAIDataConnector::setDisplayName(const QString &display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}


QString
OAIDataConnector::getType() const {
    return type;
}
void
OAIDataConnector::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}


QString
OAIDataConnector::getStatus() const {
    return status;
}
void
OAIDataConnector::setStatus(const QString &status) {
    this->status = status;
    this->m_status_isSet = true;
}


QList<OAIEventType>
OAIDataConnector::getEvents() const {
    return events;
}
void
OAIDataConnector::setEvents(const QList<OAIEventType> &events) {
    this->events = events;
    this->m_events_isSet = true;
}


QList<QString>
OAIDataConnector::getLabels() const {
    return labels;
}
void
OAIDataConnector::setLabels(const QList<QString> &labels) {
    this->labels = labels;
    this->m_labels_isSet = true;
}


OAIDataConnector_httpConfig
OAIDataConnector::getHttpConfig() const {
    return http_config;
}
void
OAIDataConnector::setHttpConfig(const OAIDataConnector_httpConfig &http_config) {
    this->http_config = http_config;
    this->m_http_config_isSet = true;
}

bool
OAIDataConnector::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_display_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_type_isSet){ isObjectUpdated = true; break;}
    
        if(m_status_isSet){ isObjectUpdated = true; break;}
    
        if(events.size() > 0){ isObjectUpdated = true; break;}
    
        if(labels.size() > 0){ isObjectUpdated = true; break;}
    
        if(http_config.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIDataConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

