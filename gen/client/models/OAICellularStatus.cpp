/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICellularStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICellularStatus::OAICellularStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICellularStatus::OAICellularStatus() {
    this->initializeModel();
}

OAICellularStatus::~OAICellularStatus() {}

void OAICellularStatus::initializeModel() {

    m_signal_strength_isSet = false;
    m_signal_strength_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICellularStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICellularStatus::fromJsonObject(QJsonObject json) {

    m_signal_strength_isValid = ::OpenAPI::fromJsonValue(signal_strength, json[QString("signalStrength")]);
    m_signal_strength_isSet = !json[QString("signalStrength")].isNull() && m_signal_strength_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICellularStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICellularStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_signal_strength_isSet) {
        obj.insert(QString("signalStrength"), ::OpenAPI::toJsonValue(signal_strength));
    }
    if (errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(errors));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(update_time));
    }
    return obj;
}

qint32 OAICellularStatus::getSignalStrength() const {
    return signal_strength;
}
void OAICellularStatus::setSignalStrength(const qint32 &signal_strength) {
    this->signal_strength = signal_strength;
    this->m_signal_strength_isSet = true;
}

QList<OAIErrorMessage> OAICellularStatus::getErrors() const {
    return errors;
}
void OAICellularStatus::setErrors(const QList<OAIErrorMessage> &errors) {
    this->errors = errors;
    this->m_errors_isSet = true;
}

QDateTime OAICellularStatus::getUpdateTime() const {
    return update_time;
}
void OAICellularStatus::setUpdateTime(const QDateTime &update_time) {
    this->update_time = update_time;
    this->m_update_time_isSet = true;
}

bool OAICellularStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_signal_strength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICellularStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
