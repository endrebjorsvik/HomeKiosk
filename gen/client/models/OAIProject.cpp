/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIProject.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->init();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->init();
}

OAIProject::~OAIProject() {

}

void
OAIProject::init() {
    
    m_name_isSet = false;
    m_name_isValid = false;
    
    m_display_name_isSet = false;
    m_display_name_isValid = false;
    
    m_inventory_isSet = false;
    m_inventory_isValid = false;
    
    m_organization_isSet = false;
    m_organization_isValid = false;
    
    m_organization_display_name_isSet = false;
    m_organization_display_name_isValid = false;
    
    m_sensor_count_isSet = false;
    m_sensor_count_isValid = false;
    
    m_cloud_connector_count_isSet = false;
    m_cloud_connector_count_isValid = false;
    }

void
OAIProject::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIProject::fromJsonObject(QJsonObject json) {
    
    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    
    m_display_name_isValid = ::OpenAPI::fromJsonValue(display_name, json[QString("displayName")]);
    
    
    m_inventory_isValid = ::OpenAPI::fromJsonValue(inventory, json[QString("inventory")]);
    
    
    m_organization_isValid = ::OpenAPI::fromJsonValue(organization, json[QString("organization")]);
    
    
    m_organization_display_name_isValid = ::OpenAPI::fromJsonValue(organization_display_name, json[QString("organizationDisplayName")]);
    
    
    m_sensor_count_isValid = ::OpenAPI::fromJsonValue(sensor_count, json[QString("sensorCount")]);
    
    
    m_cloud_connector_count_isValid = ::OpenAPI::fromJsonValue(cloud_connector_count, json[QString("cloudConnectorCount")]);
    
    
}

QString
OAIProject::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIProject::asJsonObject() const {
    QJsonObject obj;
	if(m_name_isSet){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(m_display_name_isSet){
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(display_name));
    }
	if(m_inventory_isSet){
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(inventory));
    }
	if(m_organization_isSet){
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(organization));
    }
	if(m_organization_display_name_isSet){
        obj.insert(QString("organizationDisplayName"), ::OpenAPI::toJsonValue(organization_display_name));
    }
	if(m_sensor_count_isSet){
        obj.insert(QString("sensorCount"), ::OpenAPI::toJsonValue(sensor_count));
    }
	if(m_cloud_connector_count_isSet){
        obj.insert(QString("cloudConnectorCount"), ::OpenAPI::toJsonValue(cloud_connector_count));
    }
    return obj;
}


QString
OAIProject::getName() const {
    return name;
}
void
OAIProject::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}


QString
OAIProject::getDisplayName() const {
    return display_name;
}
void
OAIProject::setDisplayName(const QString &display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}


bool
OAIProject::isInventory() const {
    return inventory;
}
void
OAIProject::setInventory(const bool &inventory) {
    this->inventory = inventory;
    this->m_inventory_isSet = true;
}


QString
OAIProject::getOrganization() const {
    return organization;
}
void
OAIProject::setOrganization(const QString &organization) {
    this->organization = organization;
    this->m_organization_isSet = true;
}


QString
OAIProject::getOrganizationDisplayName() const {
    return organization_display_name;
}
void
OAIProject::setOrganizationDisplayName(const QString &organization_display_name) {
    this->organization_display_name = organization_display_name;
    this->m_organization_display_name_isSet = true;
}


qint32
OAIProject::getSensorCount() const {
    return sensor_count;
}
void
OAIProject::setSensorCount(const qint32 &sensor_count) {
    this->sensor_count = sensor_count;
    this->m_sensor_count_isSet = true;
}


qint32
OAIProject::getCloudConnectorCount() const {
    return cloud_connector_count;
}
void
OAIProject::setCloudConnectorCount(const qint32 &cloud_connector_count) {
    this->cloud_connector_count = cloud_connector_count;
    this->m_cloud_connector_count_isSet = true;
}

bool
OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_display_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_inventory_isSet){ isObjectUpdated = true; break;}
    
        if(m_organization_isSet){ isObjectUpdated = true; break;}
    
        if(m_organization_display_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_sensor_count_isSet){ isObjectUpdated = true; break;}
    
        if(m_cloud_connector_count_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

