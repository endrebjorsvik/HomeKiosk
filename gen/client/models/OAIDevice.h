/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDevice.h
 *
 * 
 */

#ifndef OAIDevice_H
#define OAIDevice_H

#include <QJsonObject>

#include "models/OAIAnyOfConnectionStatusEventEthernetStatusEventCellularStatusEventConnectionLatencyEventTouchEvent.h"
#include "models/OAICloudConnector.h"
#include "models/OAICountingProximitySensor.h"
#include "models/OAICountingTouchSensor.h"
#include "models/OAIHumiditySensor.h"
#include "models/OAIProximitySensor.h"
#include "models/OAITemperatureSensor.h"
#include "models/OAITouchSensor.h"
#include "models/OAIWaterDetectionSensor.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDevice : public OAIObject {
public:
    OAIDevice();
    OAIDevice(QString json);
    ~OAIDevice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);

    QString getType() const;
    void setType(const QString &type);

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);

    OAIAnyOfConnectionStatusEventEthernetStatusEventCellularStatusEventConnectionLatencyEventTouchEvent getReported() const;
    void setReported(const OAIAnyOfConnectionStatusEventEthernetStatusEventCellularStatusEventConnectionLatencyEventTouchEvent &reported);

    QDateTime getUpdateTime() const;
    void setUpdateTime(const QDateTime &update_time);

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString type;
    bool m_type_isSet;
    bool m_type_isValid;

    QMap<QString, QString> labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    OAIAnyOfConnectionStatusEventEthernetStatusEventCellularStatusEventConnectionLatencyEventTouchEvent reported;
    bool m_reported_isSet;
    bool m_reported_isValid;

    QDateTime update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDevice)

#endif // OAIDevice_H
