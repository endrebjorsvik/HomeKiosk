/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_object_3.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIInline_object_3::OAIInline_object_3(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_object_3::OAIInline_object_3() {
    this->init();
}

OAIInline_object_3::~OAIInline_object_3() {

}

void
OAIInline_object_3::init() {
    
    m_roles_isSet = false;
    m_roles_isValid = false;
    
    m_email_isSet = false;
    m_email_isValid = false;
    }

void
OAIInline_object_3::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_object_3::fromJsonObject(QJsonObject json) {
    
    
    m_roles_isValid = ::OpenAPI::fromJsonValue(roles, json[QString("roles")]);
    
    m_email_isValid = ::OpenAPI::fromJsonValue(email, json[QString("email")]);
    
    
}

QString
OAIInline_object_3::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_object_3::asJsonObject() const {
    QJsonObject obj;
	
    if(roles.size() > 0){
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(roles));
    } 
	if(m_email_isSet){
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(email));
    }
    return obj;
}


QList<QString>
OAIInline_object_3::getRoles() const {
    return roles;
}
void
OAIInline_object_3::setRoles(const QList<QString> &roles) {
    this->roles = roles;
    this->m_roles_isSet = true;
}


QString
OAIInline_object_3::getEmail() const {
    return email;
}
void
OAIInline_object_3::setEmail(const QString &email) {
    this->email = email;
    this->m_email_isSet = true;
}

bool
OAIInline_object_3::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(roles.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_email_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_object_3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

