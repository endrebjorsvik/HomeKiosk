/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAINetworkStatusCloudConnector.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAINetworkStatusCloudConnector::OAINetworkStatusCloudConnector(QString json) {
    this->init();
    this->fromJson(json);
}

OAINetworkStatusCloudConnector::OAINetworkStatusCloudConnector() {
    this->init();
}

OAINetworkStatusCloudConnector::~OAINetworkStatusCloudConnector() {

}

void
OAINetworkStatusCloudConnector::init() {
    
    m_id_isSet = false;
    m_id_isValid = false;
    
    m_signal_strength_isSet = false;
    m_signal_strength_isValid = false;
    }

void
OAINetworkStatusCloudConnector::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAINetworkStatusCloudConnector::fromJsonObject(QJsonObject json) {
    
    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    
    
    m_signal_strength_isValid = ::OpenAPI::fromJsonValue(signal_strength, json[QString("signalStrength")]);
    
    
}

QString
OAINetworkStatusCloudConnector::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAINetworkStatusCloudConnector::asJsonObject() const {
    QJsonObject obj;
	if(m_id_isSet){
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
	if(m_signal_strength_isSet){
        obj.insert(QString("signalStrength"), ::OpenAPI::toJsonValue(signal_strength));
    }
    return obj;
}


QString
OAINetworkStatusCloudConnector::getId() const {
    return id;
}
void
OAINetworkStatusCloudConnector::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}


qint32
OAINetworkStatusCloudConnector::getSignalStrength() const {
    return signal_strength;
}
void
OAINetworkStatusCloudConnector::setSignalStrength(const qint32 &signal_strength) {
    this->signal_strength = signal_strength;
    this->m_signal_strength_isSet = true;
}

bool
OAINetworkStatusCloudConnector::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_id_isSet){ isObjectUpdated = true; break;}
    
        if(m_signal_strength_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAINetworkStatusCloudConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

