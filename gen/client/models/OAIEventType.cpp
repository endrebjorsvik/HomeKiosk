/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIEventType.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIEventType::OAIEventType(QString json) {
    this->init();
    this->fromJson(json);
}

OAIEventType::OAIEventType() {
    this->init();
}

OAIEventType::~OAIEventType() {

}

void
OAIEventType::init() {
    
    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventType::INVALID_VALUE_OPENAPI_GENERATED;
}

void
OAIEventType::fromJson(QString jsonString) {
     
    if ( jsonString.compare("touch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::TOUCH;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("temperature", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::TEMPERATURE;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("objectPresent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::OBJECTPRESENT;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("batteryStatus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::BATTERYSTATUS;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("networkStatus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::NETWORKSTATUS;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("labelChanged", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::LABELCHANGED;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("connectionStatus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CONNECTIONSTATUS;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("ethernetStatus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ETHERNETSTATUS;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("cellularStatus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CELLULARSTATUS;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("latencyStatus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::LATENCYSTATUS;
        m_value_isValid = true;
    }
}

void
OAIEventType::fromJsonValue(QJsonValue json) {
    
    fromJson(json.toString());
}

QString
OAIEventType::asJson () const {
    
    QString val;
    switch (m_value){
        case eOAIEventType::TOUCH:
            val = "touch";
            break;
        case eOAIEventType::TEMPERATURE:
            val = "temperature";
            break;
        case eOAIEventType::OBJECTPRESENT:
            val = "objectPresent";
            break;
        case eOAIEventType::BATTERYSTATUS:
            val = "batteryStatus";
            break;
        case eOAIEventType::NETWORKSTATUS:
            val = "networkStatus";
            break;
        case eOAIEventType::LABELCHANGED:
            val = "labelChanged";
            break;
        case eOAIEventType::CONNECTIONSTATUS:
            val = "connectionStatus";
            break;
        case eOAIEventType::ETHERNETSTATUS:
            val = "ethernetStatus";
            break;
        case eOAIEventType::CELLULARSTATUS:
            val = "cellularStatus";
            break;
        case eOAIEventType::LATENCYSTATUS:
            val = "latencyStatus";
            break; 
        default:
            break;
    }
    return val;
}

QJsonValue
OAIEventType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventType::eOAIEventType OAIEventType::getValue() const {
    return m_value;
}

void OAIEventType::setValue(const OAIEventType::eOAIEventType& value){
    m_value = value;
    m_value_isSet = true;
}
bool
OAIEventType::isSet() const {
    
    return m_value_isSet;
}

bool
OAIEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

}

