/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataConnector_httpConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataConnector_httpConfig::OAIDataConnector_httpConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataConnector_httpConfig::OAIDataConnector_httpConfig() {
    this->initializeModel();
}

OAIDataConnector_httpConfig::~OAIDataConnector_httpConfig() {}

void OAIDataConnector_httpConfig::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_signature_secret_isSet = false;
    m_signature_secret_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;
}

void OAIDataConnector_httpConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataConnector_httpConfig::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_signature_secret_isValid = ::OpenAPI::fromJsonValue(signature_secret, json[QString("signatureSecret")]);
    m_signature_secret_isSet = !json[QString("signatureSecret")].isNull() && m_signature_secret_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;
}

QString OAIDataConnector_httpConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataConnector_httpConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(url));
    }
    if (m_signature_secret_isSet) {
        obj.insert(QString("signatureSecret"), ::OpenAPI::toJsonValue(signature_secret));
    }
    if (headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(headers));
    }
    return obj;
}

QString OAIDataConnector_httpConfig::getUrl() const {
    return url;
}
void OAIDataConnector_httpConfig::setUrl(const QString &url) {
    this->url = url;
    this->m_url_isSet = true;
}

QString OAIDataConnector_httpConfig::getSignatureSecret() const {
    return signature_secret;
}
void OAIDataConnector_httpConfig::setSignatureSecret(const QString &signature_secret) {
    this->signature_secret = signature_secret;
    this->m_signature_secret_isSet = true;
}

QMap<QString, QString> OAIDataConnector_httpConfig::getHeaders() const {
    return headers;
}
void OAIDataConnector_httpConfig::setHeaders(const QMap<QString, QString> &headers) {
    this->headers = headers;
    this->m_headers_isSet = true;
}

bool OAIDataConnector_httpConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataConnector_httpConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
