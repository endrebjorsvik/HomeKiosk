/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIDataConnectorMessage.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIDataConnectorMessage::OAIDataConnectorMessage(QString json) {
    this->init();
    this->fromJson(json);
}

OAIDataConnectorMessage::OAIDataConnectorMessage() {
    this->init();
}

OAIDataConnectorMessage::~OAIDataConnectorMessage() {

}

void
OAIDataConnectorMessage::init() {
    
    m_event_isSet = false;
    m_event_isValid = false;
    
    m_labels_isSet = false;
    m_labels_isValid = false;
    }

void
OAIDataConnectorMessage::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIDataConnectorMessage::fromJsonObject(QJsonObject json) {
    
    m_event_isValid = ::OpenAPI::fromJsonValue(event, json[QString("event")]);
    
    
    
    m_labels_isValid = ::OpenAPI::fromJsonValue(labels, json[QString("labels")]);
    
}

QString
OAIDataConnectorMessage::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIDataConnectorMessage::asJsonObject() const {
    QJsonObject obj;
	if(event.isSet()){
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(event));
    }
	
    if(labels.size() > 0){
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(labels));
    } 
    return obj;
}


OAIEvent
OAIDataConnectorMessage::getEvent() const {
    return event;
}
void
OAIDataConnectorMessage::setEvent(const OAIEvent &event) {
    this->event = event;
    this->m_event_isSet = true;
}


QMap<QString, QString>
OAIDataConnectorMessage::getLabels() const {
    return labels;
}
void
OAIDataConnectorMessage::setLabels(const QMap<QString, QString> &labels) {
    this->labels = labels;
    this->m_labels_isSet = true;
}

bool
OAIDataConnectorMessage::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(event.isSet()){ isObjectUpdated = true; break;}
    
        if(labels.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIDataConnectorMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

