/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200::OAIInline_response_200(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200::OAIInline_response_200() {
    this->initializeModel();
}

OAIInline_response_200::~OAIInline_response_200() {}

void OAIInline_response_200::initializeModel() {

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIInline_response_200::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200::fromJsonObject(QJsonObject json) {

    m_devices_isValid = ::OpenAPI::fromJsonValue(devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIInline_response_200::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200::asJsonObject() const {
    QJsonObject obj;
    if (devices.size() > 0) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(devices));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(next_page_token));
    }
    return obj;
}

QList<OAIDevice> OAIInline_response_200::getDevices() const {
    return devices;
}
void OAIInline_response_200::setDevices(const QList<OAIDevice> &devices) {
    this->devices = devices;
    this->m_devices_isSet = true;
}

QString OAIInline_response_200::getNextPageToken() const {
    return next_page_token;
}
void OAIInline_response_200::setNextPageToken(const QString &next_page_token) {
    this->next_page_token = next_page_token;
    this->m_next_page_token_isSet = true;
}

bool OAIInline_response_200::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
