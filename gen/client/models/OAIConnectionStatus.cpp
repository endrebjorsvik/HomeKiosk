/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIConnectionStatus.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIConnectionStatus::OAIConnectionStatus(QString json) {
    this->init();
    this->fromJson(json);
}

OAIConnectionStatus::OAIConnectionStatus() {
    this->init();
}

OAIConnectionStatus::~OAIConnectionStatus() {

}

void
OAIConnectionStatus::init() {
    
    m_connection_isSet = false;
    m_connection_isValid = false;
    
    m_available_isSet = false;
    m_available_isValid = false;
    
    m_update_time_isSet = false;
    m_update_time_isValid = false;
    }

void
OAIConnectionStatus::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIConnectionStatus::fromJsonObject(QJsonObject json) {
    
    m_connection_isValid = ::OpenAPI::fromJsonValue(connection, json[QString("connection")]);
    
    
    
    m_available_isValid = ::OpenAPI::fromJsonValue(available, json[QString("available")]);
    
    m_update_time_isValid = ::OpenAPI::fromJsonValue(update_time, json[QString("updateTime")]);
    
    
}

QString
OAIConnectionStatus::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIConnectionStatus::asJsonObject() const {
    QJsonObject obj;
	if(m_connection_isSet){
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(connection));
    }
	
    if(available.size() > 0){
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(available));
    } 
	if(m_update_time_isSet){
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(update_time));
    }
    return obj;
}


QString
OAIConnectionStatus::getConnection() const {
    return connection;
}
void
OAIConnectionStatus::setConnection(const QString &connection) {
    this->connection = connection;
    this->m_connection_isSet = true;
}


QList<QString>
OAIConnectionStatus::getAvailable() const {
    return available;
}
void
OAIConnectionStatus::setAvailable(const QList<QString> &available) {
    this->available = available;
    this->m_available_isSet = true;
}


QDateTime
OAIConnectionStatus::getUpdateTime() const {
    return update_time;
}
void
OAIConnectionStatus::setUpdateTime(const QDateTime &update_time) {
    this->update_time = update_time;
    this->m_update_time_isSet = true;
}

bool
OAIConnectionStatus::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_connection_isSet){ isObjectUpdated = true; break;}
    
        if(available.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_update_time_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIConnectionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

