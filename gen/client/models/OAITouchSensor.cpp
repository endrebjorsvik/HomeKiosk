/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAITouchSensor.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAITouchSensor::OAITouchSensor(QString json) {
    this->init();
    this->fromJson(json);
}

OAITouchSensor::OAITouchSensor() {
    this->init();
}

OAITouchSensor::~OAITouchSensor() {

}

void
OAITouchSensor::init() {
    
    m_name_isSet = false;
    m_name_isValid = false;
    
    m_type_isSet = false;
    m_type_isValid = false;
    
    m_labels_isSet = false;
    m_labels_isValid = false;
    
    m_create_time_isSet = false;
    m_create_time_isValid = false;
    
    m_update_time_isSet = false;
    m_update_time_isValid = false;
    
    m_reported_isSet = false;
    m_reported_isValid = false;
    }

void
OAITouchSensor::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAITouchSensor::fromJsonObject(QJsonObject json) {
    
    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    
    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    
    
    
    m_labels_isValid = ::OpenAPI::fromJsonValue(labels, json[QString("labels")]);
    
    m_create_time_isValid = ::OpenAPI::fromJsonValue(create_time, json[QString("createTime")]);
    
    
    m_update_time_isValid = ::OpenAPI::fromJsonValue(update_time, json[QString("updateTime")]);
    
    
    m_reported_isValid = ::OpenAPI::fromJsonValue(reported, json[QString("reported")]);
    
    
}

QString
OAITouchSensor::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAITouchSensor::asJsonObject() const {
    QJsonObject obj;
	if(m_name_isSet){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(m_type_isSet){
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
	
    if(labels.size() > 0){
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(labels));
    } 
	if(m_create_time_isSet){
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(create_time));
    }
	if(m_update_time_isSet){
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(update_time));
    }
	if(reported.isSet()){
        obj.insert(QString("reported"), ::OpenAPI::toJsonValue(reported));
    }
    return obj;
}


QString
OAITouchSensor::getName() const {
    return name;
}
void
OAITouchSensor::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}


QString
OAITouchSensor::getType() const {
    return type;
}
void
OAITouchSensor::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}


QMap<QString, QString>
OAITouchSensor::getLabels() const {
    return labels;
}
void
OAITouchSensor::setLabels(const QMap<QString, QString> &labels) {
    this->labels = labels;
    this->m_labels_isSet = true;
}


QDateTime
OAITouchSensor::getCreateTime() const {
    return create_time;
}
void
OAITouchSensor::setCreateTime(const QDateTime &create_time) {
    this->create_time = create_time;
    this->m_create_time_isSet = true;
}


QDateTime
OAITouchSensor::getUpdateTime() const {
    return update_time;
}
void
OAITouchSensor::setUpdateTime(const QDateTime &update_time) {
    this->update_time = update_time;
    this->m_update_time_isSet = true;
}


OAIAnyOfNetworkStatusEventBatteryStatusEventTouchEvent
OAITouchSensor::getReported() const {
    return reported;
}
void
OAITouchSensor::setReported(const OAIAnyOfNetworkStatusEventBatteryStatusEventTouchEvent &reported) {
    this->reported = reported;
    this->m_reported_isSet = true;
}

bool
OAITouchSensor::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_type_isSet){ isObjectUpdated = true; break;}
    
        if(labels.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_create_time_isSet){ isObjectUpdated = true; break;}
    
        if(m_update_time_isSet){ isObjectUpdated = true; break;}
    
        if(reported.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAITouchSensor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

