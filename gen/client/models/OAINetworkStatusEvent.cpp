/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkStatusEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkStatusEvent::OAINetworkStatusEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkStatusEvent::OAINetworkStatusEvent() {
    this->initializeModel();
}

OAINetworkStatusEvent::~OAINetworkStatusEvent() {}

void OAINetworkStatusEvent::initializeModel() {

    m_network_status_isSet = false;
    m_network_status_isValid = false;
}

void OAINetworkStatusEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkStatusEvent::fromJsonObject(QJsonObject json) {

    m_network_status_isValid = ::OpenAPI::fromJsonValue(network_status, json[QString("networkStatus")]);
    m_network_status_isSet = !json[QString("networkStatus")].isNull() && m_network_status_isValid;
}

QString OAINetworkStatusEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkStatusEvent::asJsonObject() const {
    QJsonObject obj;
    if (network_status.isSet()) {
        obj.insert(QString("networkStatus"), ::OpenAPI::toJsonValue(network_status));
    }
    return obj;
}

OAINetworkStatus OAINetworkStatusEvent::getNetworkStatus() const {
    return network_status;
}
void OAINetworkStatusEvent::setNetworkStatus(const OAINetworkStatus &network_status) {
    this->network_status = network_status;
    this->m_network_status_isSet = true;
}

bool OAINetworkStatusEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (network_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkStatusEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
