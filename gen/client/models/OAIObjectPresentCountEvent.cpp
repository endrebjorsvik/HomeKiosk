/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectPresentCountEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectPresentCountEvent::OAIObjectPresentCountEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectPresentCountEvent::OAIObjectPresentCountEvent() {
    this->initializeModel();
}

OAIObjectPresentCountEvent::~OAIObjectPresentCountEvent() {}

void OAIObjectPresentCountEvent::initializeModel() {

    m_object_present_count_isSet = false;
    m_object_present_count_isValid = false;
}

void OAIObjectPresentCountEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectPresentCountEvent::fromJsonObject(QJsonObject json) {

    m_object_present_count_isValid = ::OpenAPI::fromJsonValue(object_present_count, json[QString("objectPresentCount")]);
    m_object_present_count_isSet = !json[QString("objectPresentCount")].isNull() && m_object_present_count_isValid;
}

QString OAIObjectPresentCountEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectPresentCountEvent::asJsonObject() const {
    QJsonObject obj;
    if (object_present_count.isSet()) {
        obj.insert(QString("objectPresentCount"), ::OpenAPI::toJsonValue(object_present_count));
    }
    return obj;
}

OAIObjectPresentCount OAIObjectPresentCountEvent::getObjectPresentCount() const {
    return object_present_count;
}
void OAIObjectPresentCountEvent::setObjectPresentCount(const OAIObjectPresentCount &object_present_count) {
    this->object_present_count = object_present_count;
    this->m_object_present_count_isSet = true;
}

bool OAIObjectPresentCountEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (object_present_count.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectPresentCountEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
