/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200_7.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIInline_response_200_7::OAIInline_response_200_7(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200_7::OAIInline_response_200_7() {
    this->init();
}

OAIInline_response_200_7::~OAIInline_response_200_7() {

}

void
OAIInline_response_200_7::init() {
    
    m_name_isSet = false;
    m_name_isValid = false;
    
    m_display_name_isSet = false;
    m_display_name_isValid = false;
    
    m_description_isSet = false;
    m_description_isValid = false;
    }

void
OAIInline_response_200_7::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200_7::fromJsonObject(QJsonObject json) {
    
    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    
    m_display_name_isValid = ::OpenAPI::fromJsonValue(display_name, json[QString("displayName")]);
    
    
    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    
    
}

QString
OAIInline_response_200_7::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200_7::asJsonObject() const {
    QJsonObject obj;
	if(m_name_isSet){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(m_display_name_isSet){
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(display_name));
    }
	if(m_description_isSet){
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    return obj;
}


QString
OAIInline_response_200_7::getName() const {
    return name;
}
void
OAIInline_response_200_7::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}


QString
OAIInline_response_200_7::getDisplayName() const {
    return display_name;
}
void
OAIInline_response_200_7::setDisplayName(const QString &display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}


QString
OAIInline_response_200_7::getDescription() const {
    return description;
}
void
OAIInline_response_200_7::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool
OAIInline_response_200_7::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_display_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_description_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200_7::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

