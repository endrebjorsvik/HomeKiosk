/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembershipsAndAccessControlApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMembershipsAndAccessControlApi::OAIMembershipsAndAccessControlApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAIMembershipsAndAccessControlApi::~OAIMembershipsAndAccessControlApi() {
}

void OAIMembershipsAndAccessControlApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIMembershipsAndAccessControlApi::setHost(const QString &host) {
    _host = host;
}

void OAIMembershipsAndAccessControlApi::setPort(int port) {
    _port = port;
}

void OAIMembershipsAndAccessControlApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIMembershipsAndAccessControlApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMembershipsAndAccessControlApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMembershipsAndAccessControlApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIMembershipsAndAccessControlApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIMembershipsAndAccessControlApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIMembershipsAndAccessControlApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersGet(const QString &organization, const QString &page_size, const QString &page_token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/organizations/{organization}/members");
    QString organizationPathParam("{");
    organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_9 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsOrganizationMembersGetSignal(output);
        emit organizationsOrganizationMembersGetSignalFull(worker, output);
    } else {
        emit organizationsOrganizationMembersGetSignalE(output, error_type, error_str);
        emit organizationsOrganizationMembersGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMemberDelete(const QString &organization, const QString &member) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/organizations/{organization}/members/{member}");
    QString organizationPathParam("{");
    organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    QString memberPathParam("{");
    memberPathParam.append("member").append("}");
    fullPath.replace(memberPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(member)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMemberDeleteCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMemberDeleteCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsOrganizationMembersMemberDeleteSignal();
        emit organizationsOrganizationMembersMemberDeleteSignalFull(worker);
    } else {
        emit organizationsOrganizationMembersMemberDeleteSignalE(error_type, error_str);
        emit organizationsOrganizationMembersMemberDeleteSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMemberGet(const QString &organization, const QString &member) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/organizations/{organization}/members/{member}");
    QString organizationPathParam("{");
    organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    QString memberPathParam("{");
    memberPathParam.append("member").append("}");
    fullPath.replace(memberPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(member)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMemberGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMemberGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIMember output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsOrganizationMembersMemberGetSignal(output);
        emit organizationsOrganizationMembersMemberGetSignalFull(worker, output);
    } else {
        emit organizationsOrganizationMembersMemberGetSignalE(output, error_type, error_str);
        emit organizationsOrganizationMembersMemberGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMemberPatch(const QString &organization, const QString &member, const QString &update_mask, const OAIMember &oai_member) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/organizations/{organization}/members/{member}");
    QString organizationPathParam("{");
    organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    QString memberPathParam("{");
    memberPathParam.append("member").append("}");
    fullPath.replace(memberPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(member)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("update_mask")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(update_mask)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    QString output = oai_member.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMemberPatchCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMemberPatchCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIMember output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsOrganizationMembersMemberPatchSignal(output);
        emit organizationsOrganizationMembersMemberPatchSignalFull(worker, output);
    } else {
        emit organizationsOrganizationMembersMemberPatchSignalE(output, error_type, error_str);
        emit organizationsOrganizationMembersMemberPatchSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMembergetInviteUrlGet(const QString &organization, const QString &member) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/organizations/{organization}/members/{member}:getInviteUrl");
    QString organizationPathParam("{");
    organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    QString memberPathParam("{");
    memberPathParam.append("member").append("}");
    fullPath.replace(memberPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(member)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMembergetInviteUrlGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersMembergetInviteUrlGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_10 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsOrganizationMembersMembergetInviteUrlGetSignal(output);
        emit organizationsOrganizationMembersMembergetInviteUrlGetSignalFull(worker, output);
    } else {
        emit organizationsOrganizationMembersMembergetInviteUrlGetSignalE(output, error_type, error_str);
        emit organizationsOrganizationMembersMembergetInviteUrlGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersPost(const QString &organization, const OAIInline_object_2 &oai_inline_object_2) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/organizations/{organization}/members");
    QString organizationPathParam("{");
    organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    QString output = oai_inline_object_2.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersPostCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationMembersPostCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIMember output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsOrganizationMembersPostSignal(output);
        emit organizationsOrganizationMembersPostSignalFull(worker, output);
    } else {
        emit organizationsOrganizationMembersPostSignalE(output, error_type, error_str);
        emit organizationsOrganizationMembersPostSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationPermissionsGet(const QString &organization, const QString &page_size, const QString &page_token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/organizations/{organization}/permissions");
    QString organizationPathParam("{");
    organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::organizationsOrganizationPermissionsGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::organizationsOrganizationPermissionsGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIOrganizationPermissionList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsOrganizationPermissionsGetSignal(output);
        emit organizationsOrganizationPermissionsGetSignalFull(worker, output);
    } else {
        emit organizationsOrganizationPermissionsGetSignalE(output, error_type, error_str);
        emit organizationsOrganizationPermissionsGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersGet(const QString &project, const QString &page_size, const QString &page_token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/members");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::projectsProjectMembersGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_9 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectMembersGetSignal(output);
        emit projectsProjectMembersGetSignalFull(worker, output);
    } else {
        emit projectsProjectMembersGetSignalE(output, error_type, error_str);
        emit projectsProjectMembersGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersMemberDelete(const QString &project, const QString &member) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/members/{member}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString memberPathParam("{");
    memberPathParam.append("member").append("}");
    fullPath.replace(memberPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(member)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::projectsProjectMembersMemberDeleteCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersMemberDeleteCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectMembersMemberDeleteSignal();
        emit projectsProjectMembersMemberDeleteSignalFull(worker);
    } else {
        emit projectsProjectMembersMemberDeleteSignalE(error_type, error_str);
        emit projectsProjectMembersMemberDeleteSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersMemberGet(const QString &project, const QString &member) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/members/{member}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString memberPathParam("{");
    memberPathParam.append("member").append("}");
    fullPath.replace(memberPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(member)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::projectsProjectMembersMemberGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersMemberGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIMember output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectMembersMemberGetSignal(output);
        emit projectsProjectMembersMemberGetSignalFull(worker, output);
    } else {
        emit projectsProjectMembersMemberGetSignalE(output, error_type, error_str);
        emit projectsProjectMembersMemberGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersMemberPatch(const QString &project, const QString &member, const QString &update_mask, const OAIMember &oai_member) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/members/{member}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString memberPathParam("{");
    memberPathParam.append("member").append("}");
    fullPath.replace(memberPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(member)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("update_mask")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(update_mask)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    QString output = oai_member.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::projectsProjectMembersMemberPatchCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersMemberPatchCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIMember output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectMembersMemberPatchSignal(output);
        emit projectsProjectMembersMemberPatchSignalFull(worker, output);
    } else {
        emit projectsProjectMembersMemberPatchSignalE(output, error_type, error_str);
        emit projectsProjectMembersMemberPatchSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersMembergetInviteUrlGet(const QString &project, const QString &member) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/members/{member}:getInviteUrl");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString memberPathParam("{");
    memberPathParam.append("member").append("}");
    fullPath.replace(memberPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(member)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::projectsProjectMembersMembergetInviteUrlGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersMembergetInviteUrlGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_10 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectMembersMembergetInviteUrlGetSignal(output);
        emit projectsProjectMembersMembergetInviteUrlGetSignalFull(worker, output);
    } else {
        emit projectsProjectMembersMembergetInviteUrlGetSignalE(output, error_type, error_str);
        emit projectsProjectMembersMembergetInviteUrlGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersPost(const QString &project, const OAIInline_object_3 &oai_inline_object_3) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/members");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    QString output = oai_inline_object_3.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::projectsProjectMembersPostCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::projectsProjectMembersPostCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIMember output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectMembersPostSignal(output);
        emit projectsProjectMembersPostSignalFull(worker, output);
    } else {
        emit projectsProjectMembersPostSignalE(output, error_type, error_str);
        emit projectsProjectMembersPostSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::projectsProjectPermissionsGet(const QString &project, const QString &page_size, const QString &page_token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/permissions");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::projectsProjectPermissionsGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::projectsProjectPermissionsGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIProjectPermissionList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectPermissionsGetSignal(output);
        emit projectsProjectPermissionsGetSignalFull(worker, output);
    } else {
        emit projectsProjectPermissionsGetSignalE(output, error_type, error_str);
        emit projectsProjectPermissionsGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::rolesGet(const QString &page_size, const QString &page_token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/roles");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::rolesGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::rolesGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_6 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit rolesGetSignal(output);
        emit rolesGetSignalFull(worker, output);
    } else {
        emit rolesGetSignalE(output, error_type, error_str);
        emit rolesGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIMembershipsAndAccessControlApi::rolesRoleGet(const QString &role) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/roles/{role}");
    QString rolePathParam("{");
    rolePathParam.append("role").append("}");
    fullPath.replace(rolePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(role)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembershipsAndAccessControlApi::rolesRoleGetCallback);
    connect(this, &OAIMembershipsAndAccessControlApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMembershipsAndAccessControlApi::rolesRoleGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_7 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit rolesRoleGetSignal(output);
        emit rolesRoleGetSignalFull(worker, output);
    } else {
        emit rolesRoleGetSignalE(output, error_type, error_str);
        emit rolesRoleGetSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
