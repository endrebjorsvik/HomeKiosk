/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceAccountsApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIServiceAccountsApi::OAIServiceAccountsApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAIServiceAccountsApi::~OAIServiceAccountsApi() {
}

void OAIServiceAccountsApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIServiceAccountsApi::setHost(const QString &host) {
    _host = host;
}

void OAIServiceAccountsApi::setPort(int port) {
    _port = port;
}

void OAIServiceAccountsApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIServiceAccountsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIServiceAccountsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIServiceAccountsApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIServiceAccountsApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIServiceAccountsApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIServiceAccountsApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsGet(const QString &project, const QString &page_size, const QString &page_token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/serviceaccounts");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceAccountsApi::projectsProjectServiceaccountsGetCallback);
    connect(this, &OAIServiceAccountsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_12 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectServiceaccountsGetSignal(output);
        emit projectsProjectServiceaccountsGetSignalFull(worker, output);
    } else {
        emit projectsProjectServiceaccountsGetSignalE(output, error_type, error_str);
        emit projectsProjectServiceaccountsGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsPost(const QString &project, const UNKNOWN_BASE_TYPE &unknown_base_type) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/serviceaccounts");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    QString output = unknown_base_type.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceAccountsApi::projectsProjectServiceaccountsPostCallback);
    connect(this, &OAIServiceAccountsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsPostCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIServiceAccount output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectServiceaccountsPostSignal(output);
        emit projectsProjectServiceaccountsPostSignalFull(worker, output);
    } else {
        emit projectsProjectServiceaccountsPostSignalE(output, error_type, error_str);
        emit projectsProjectServiceaccountsPostSignalEFull(worker, error_type, error_str);
    }
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountDelete(const QString &project, const QString &serviceaccount) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/serviceaccounts/{serviceaccount}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString serviceaccountPathParam("{");
    serviceaccountPathParam.append("serviceaccount").append("}");
    fullPath.replace(serviceaccountPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(serviceaccount)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountDeleteCallback);
    connect(this, &OAIServiceAccountsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountDeleteCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectServiceaccountsServiceaccountDeleteSignal();
        emit projectsProjectServiceaccountsServiceaccountDeleteSignalFull(worker);
    } else {
        emit projectsProjectServiceaccountsServiceaccountDeleteSignalE(error_type, error_str);
        emit projectsProjectServiceaccountsServiceaccountDeleteSignalEFull(worker, error_type, error_str);
    }
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountGet(const QString &project, const QString &serviceaccount) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/serviceaccounts/{serviceaccount}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString serviceaccountPathParam("{");
    serviceaccountPathParam.append("serviceaccount").append("}");
    fullPath.replace(serviceaccountPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(serviceaccount)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountGetCallback);
    connect(this, &OAIServiceAccountsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIServiceAccount output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectServiceaccountsServiceaccountGetSignal(output);
        emit projectsProjectServiceaccountsServiceaccountGetSignalFull(worker, output);
    } else {
        emit projectsProjectServiceaccountsServiceaccountGetSignalE(output, error_type, error_str);
        emit projectsProjectServiceaccountsServiceaccountGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysGet(const QString &project, const QString &serviceaccount, const QString &page_size, const QString &page_token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/serviceaccounts/{serviceaccount}/keys");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString serviceaccountPathParam("{");
    serviceaccountPathParam.append("serviceaccount").append("}");
    fullPath.replace(serviceaccountPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(serviceaccount)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysGetCallback);
    connect(this, &OAIServiceAccountsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_13 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectServiceaccountsServiceaccountKeysGetSignal(output);
        emit projectsProjectServiceaccountsServiceaccountKeysGetSignalFull(worker, output);
    } else {
        emit projectsProjectServiceaccountsServiceaccountKeysGetSignalE(output, error_type, error_str);
        emit projectsProjectServiceaccountsServiceaccountKeysGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysKeyDelete(const QString &project, const QString &serviceaccount, const QString &key) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/serviceaccounts/{serviceaccount}/keys/{key}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString serviceaccountPathParam("{");
    serviceaccountPathParam.append("serviceaccount").append("}");
    fullPath.replace(serviceaccountPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(serviceaccount)));
    QString keyPathParam("{");
    keyPathParam.append("key").append("}");
    fullPath.replace(keyPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(key)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysKeyDeleteCallback);
    connect(this, &OAIServiceAccountsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysKeyDeleteCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectServiceaccountsServiceaccountKeysKeyDeleteSignal();
        emit projectsProjectServiceaccountsServiceaccountKeysKeyDeleteSignalFull(worker);
    } else {
        emit projectsProjectServiceaccountsServiceaccountKeysKeyDeleteSignalE(error_type, error_str);
        emit projectsProjectServiceaccountsServiceaccountKeysKeyDeleteSignalEFull(worker, error_type, error_str);
    }
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysKeyGet(const QString &project, const QString &serviceaccount, const QString &key) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/serviceaccounts/{serviceaccount}/keys/{key}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString serviceaccountPathParam("{");
    serviceaccountPathParam.append("serviceaccount").append("}");
    fullPath.replace(serviceaccountPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(serviceaccount)));
    QString keyPathParam("{");
    keyPathParam.append("key").append("}");
    fullPath.replace(keyPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(key)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysKeyGetCallback);
    connect(this, &OAIServiceAccountsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysKeyGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIServiceAccountKey output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectServiceaccountsServiceaccountKeysKeyGetSignal(output);
        emit projectsProjectServiceaccountsServiceaccountKeysKeyGetSignalFull(worker, output);
    } else {
        emit projectsProjectServiceaccountsServiceaccountKeysKeyGetSignalE(output, error_type, error_str);
        emit projectsProjectServiceaccountsServiceaccountKeysKeyGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysPost(const QString &project, const QString &serviceaccount, const OAIObject &body) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/serviceaccounts/{serviceaccount}/keys");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString serviceaccountPathParam("{");
    serviceaccountPathParam.append("serviceaccount").append("}");
    fullPath.replace(serviceaccountPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(serviceaccount)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    QString output = body.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysPostCallback);
    connect(this, &OAIServiceAccountsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountKeysPostCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIServiceAccountKeyWithSecret output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectServiceaccountsServiceaccountKeysPostSignal(output);
        emit projectsProjectServiceaccountsServiceaccountKeysPostSignalFull(worker, output);
    } else {
        emit projectsProjectServiceaccountsServiceaccountKeysPostSignalE(output, error_type, error_str);
        emit projectsProjectServiceaccountsServiceaccountKeysPostSignalEFull(worker, error_type, error_str);
    }
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountPatch(const QString &project, const QString &serviceaccount, const QString &update_mask, const OAIServiceAccount &oai_service_account) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/serviceaccounts/{serviceaccount}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString serviceaccountPathParam("{");
    serviceaccountPathParam.append("serviceaccount").append("}");
    fullPath.replace(serviceaccountPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(serviceaccount)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("update_mask")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(update_mask)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    QString output = oai_service_account.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountPatchCallback);
    connect(this, &OAIServiceAccountsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIServiceAccountsApi::projectsProjectServiceaccountsServiceaccountPatchCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIServiceAccount output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectServiceaccountsServiceaccountPatchSignal(output);
        emit projectsProjectServiceaccountsServiceaccountPatchSignalFull(worker, output);
    } else {
        emit projectsProjectServiceaccountsServiceaccountPatchSignalE(output, error_type, error_str);
        emit projectsProjectServiceaccountsServiceaccountPatchSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
