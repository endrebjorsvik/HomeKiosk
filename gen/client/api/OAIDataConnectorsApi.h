/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataConnectorsApi_H
#define OAI_OAIDataConnectorsApi_H

#include "OAIHttpRequest.h"

#include "models/OAIDataConnector.h"
#include "models/OAIInline_response_200_4.h"
#include "models/OAIInline_response_200_5.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIDataConnectorsApi : public QObject {
    Q_OBJECT

public:
    OAIDataConnectorsApi(const QString &scheme = "https", const QString &host = "api.disruptive-technologies.com", int port = 0, const QString &basePath = "/v2", const int timeOut = 0);
    ~OAIDataConnectorsApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void projectsProjectDataconnectorsDataconnectorDelete(const QString &project, const QString &dataconnector);
    void projectsProjectDataconnectorsDataconnectorGet(const QString &project, const QString &dataconnector);
    void projectsProjectDataconnectorsDataconnectorPatch(const QString &project, const QString &dataconnector, const QString &update_mask, const OAIDataConnector &oai_data_connector);
    void projectsProjectDataconnectorsDataconnectormetricsGet(const QString &project, const QString &dataconnector);
    void projectsProjectDataconnectorsDataconnectorsyncPost(const QString &project, const QString &dataconnector);
    void projectsProjectDataconnectorsGet(const QString &project, const QString &page_size, const QString &page_token);
    void projectsProjectDataconnectorsPost(const QString &project, const OAIDataConnector &oai_data_connector);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void projectsProjectDataconnectorsDataconnectorDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsProjectDataconnectorsDataconnectorGetCallback(OAIHttpRequestWorker *worker);
    void projectsProjectDataconnectorsDataconnectorPatchCallback(OAIHttpRequestWorker *worker);
    void projectsProjectDataconnectorsDataconnectormetricsGetCallback(OAIHttpRequestWorker *worker);
    void projectsProjectDataconnectorsDataconnectorsyncPostCallback(OAIHttpRequestWorker *worker);
    void projectsProjectDataconnectorsGetCallback(OAIHttpRequestWorker *worker);
    void projectsProjectDataconnectorsPostCallback(OAIHttpRequestWorker *worker);

signals:

    void projectsProjectDataconnectorsDataconnectorDeleteSignal();
    void projectsProjectDataconnectorsDataconnectorGetSignal(OAIDataConnector summary);
    void projectsProjectDataconnectorsDataconnectorPatchSignal(OAIDataConnector summary);
    void projectsProjectDataconnectorsDataconnectormetricsGetSignal(OAIInline_response_200_5 summary);
    void projectsProjectDataconnectorsDataconnectorsyncPostSignal();
    void projectsProjectDataconnectorsGetSignal(OAIInline_response_200_4 summary);
    void projectsProjectDataconnectorsPostSignal(OAIDataConnector summary);

    void projectsProjectDataconnectorsDataconnectorDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsProjectDataconnectorsDataconnectorGetSignalFull(OAIHttpRequestWorker *worker, OAIDataConnector summary);
    void projectsProjectDataconnectorsDataconnectorPatchSignalFull(OAIHttpRequestWorker *worker, OAIDataConnector summary);
    void projectsProjectDataconnectorsDataconnectormetricsGetSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_5 summary);
    void projectsProjectDataconnectorsDataconnectorsyncPostSignalFull(OAIHttpRequestWorker *worker);
    void projectsProjectDataconnectorsGetSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_4 summary);
    void projectsProjectDataconnectorsPostSignalFull(OAIHttpRequestWorker *worker, OAIDataConnector summary);

    void projectsProjectDataconnectorsDataconnectorDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsDataconnectorGetSignalE(OAIDataConnector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsDataconnectorPatchSignalE(OAIDataConnector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsDataconnectormetricsGetSignalE(OAIInline_response_200_5 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsDataconnectorsyncPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsGetSignalE(OAIInline_response_200_4 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsPostSignalE(OAIDataConnector summary, QNetworkReply::NetworkError error_type, QString error_str);

    void projectsProjectDataconnectorsDataconnectorDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsDataconnectorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsDataconnectorPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsDataconnectormetricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsDataconnectorsyncPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDataconnectorsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
