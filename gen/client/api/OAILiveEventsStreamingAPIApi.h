/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILiveEventsStreamingAPIApi_H
#define OAI_OAILiveEventsStreamingAPIApi_H

#include "OAIHttpRequest.h"

#include "models/OAIEvent.h"
#include "models/OAIEventType.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAILiveEventsStreamingAPIApi : public QObject {
    Q_OBJECT

public:
    OAILiveEventsStreamingAPIApi(const QString &scheme = "https", const QString &host = "api.disruptive-technologies.com", int port = 0, const QString &basePath = "/v2", const int timeOut = 0);
    ~OAILiveEventsStreamingAPIApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void projectsProjectDevicesDevicestreamGet(const QString &project, const QString &device, const QString &token, const QList<OAIEventType> &event_types);
    void projectsProjectDevicesstreamGet(const QString &project, const QString &token, const QList<QString> &device_ids, const QList<QString> &label_filters, const QList<QString> &device_types, const QList<OAIEventType> &event_types);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void projectsProjectDevicesDevicestreamGetCallback(OAIHttpRequestWorker *worker);
    void projectsProjectDevicesstreamGetCallback(OAIHttpRequestWorker *worker);

signals:

    void projectsProjectDevicesDevicestreamGetSignal(OAIEvent summary);
    void projectsProjectDevicesstreamGetSignal(OAIEvent summary);

    void projectsProjectDevicesDevicestreamGetSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void projectsProjectDevicesstreamGetSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);

    void projectsProjectDevicesDevicestreamGetSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDevicesstreamGetSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);

    void projectsProjectDevicesDevicestreamGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDevicesstreamGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
