/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILiveEventsStreamingAPIApi_H
#define OAI_OAILiveEventsStreamingAPIApi_H

#include "OAIHttpRequest.h"

#include "models/OAIEvent.h"
#include "models/OAIEventType.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAILiveEventsStreamingAPIApi: public QObject {
    Q_OBJECT

public:
    OAILiveEventsStreamingAPIApi();
    OAILiveEventsStreamingAPIApi(const QString& host, const QString& basePath, const int toutMs = 0);
    ~OAILiveEventsStreamingAPIApi();

    void setBasePath(const QString& basePath);
    void setHost(const QString& host);
    void setApiTimeOutMs(const int tout);
    void addHeaders(const QString& key, const QString& value);
    
    void projectsProjectDevicesDevicestreamGet(const QString& project, const QString& device, const QString& token, const QList<OAIEventType>& event_types);
    void projectsProjectDevicesstreamGet(const QString& project, const QString& token, const QList<QString>& device_ids, const QList<QString>& label_filters, const QList<QString>& device_types, const QList<OAIEventType>& event_types);
    
private:
    QString basePath;
    QString host;
    int timeout;
    QMap<QString, QString> defaultHeaders;
    void projectsProjectDevicesDevicestreamGetCallback (OAIHttpRequestWorker * worker);
    void projectsProjectDevicesstreamGetCallback (OAIHttpRequestWorker * worker);
    
signals:
    void projectsProjectDevicesDevicestreamGetSignal(OAIEvent summary);
    void projectsProjectDevicesstreamGetSignal(OAIEvent summary);
    
    void projectsProjectDevicesDevicestreamGetSignalFull(OAIHttpRequestWorker* worker, OAIEvent summary);
    void projectsProjectDevicesstreamGetSignalFull(OAIHttpRequestWorker* worker, OAIEvent summary);
    
    void projectsProjectDevicesDevicestreamGetSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDevicesstreamGetSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    
    void projectsProjectDevicesDevicestreamGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectDevicesstreamGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    
};

}
#endif
