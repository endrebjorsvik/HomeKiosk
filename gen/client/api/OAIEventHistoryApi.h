/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventHistoryApi_H
#define OAI_OAIEventHistoryApi_H

#include "OAIHttpRequest.h"

#include "models/OAIEventType.h"
#include "models/OAIInline_response_200_2.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIEventHistoryApi: public QObject {
    Q_OBJECT

public:
    OAIEventHistoryApi();
    OAIEventHistoryApi(const QString& host, const QString& basePath, const int toutMs = 0);
    ~OAIEventHistoryApi();

    void setBasePath(const QString& basePath);
    void setHost(const QString& host);
    void setApiTimeOutMs(const int tout);
    void addHeaders(const QString& key, const QString& value);
    
    void projectsProjectDevicesDeviceEventsGet(const QString& project, const QString& device, const QList<OAIEventType>& event_types, const QString& page_size, const QString& page_token, const QDateTime& start_time, const QDateTime& end_time);
    
private:
    QString basePath;
    QString host;
    int timeout;
    QMap<QString, QString> defaultHeaders;
    void projectsProjectDevicesDeviceEventsGetCallback (OAIHttpRequestWorker * worker);
    
signals:
    void projectsProjectDevicesDeviceEventsGetSignal(OAIInline_response_200_2 summary);
    
    void projectsProjectDevicesDeviceEventsGetSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_2 summary);
    
    void projectsProjectDevicesDeviceEventsGetSignalE(OAIInline_response_200_2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    
    void projectsProjectDevicesDeviceEventsGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    
};

}
#endif
