/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataConnectorsApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDataConnectorsApi::OAIDataConnectorsApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAIDataConnectorsApi::~OAIDataConnectorsApi() {
}

void OAIDataConnectorsApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIDataConnectorsApi::setHost(const QString &host) {
    _host = host;
}

void OAIDataConnectorsApi::setPort(int port) {
    _port = port;
}

void OAIDataConnectorsApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIDataConnectorsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDataConnectorsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDataConnectorsApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIDataConnectorsApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIDataConnectorsApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIDataConnectorsApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorDelete(const QString &project, const QString &dataconnector) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/dataconnectors/{dataconnector}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString dataconnectorPathParam("{");
    dataconnectorPathParam.append("dataconnector").append("}");
    fullPath.replace(dataconnectorPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(dataconnector)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorDeleteCallback);
    connect(this, &OAIDataConnectorsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorDeleteCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectDataconnectorsDataconnectorDeleteSignal();
        emit projectsProjectDataconnectorsDataconnectorDeleteSignalFull(worker);
    } else {
        emit projectsProjectDataconnectorsDataconnectorDeleteSignalE(error_type, error_str);
        emit projectsProjectDataconnectorsDataconnectorDeleteSignalEFull(worker, error_type, error_str);
    }
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorGet(const QString &project, const QString &dataconnector) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/dataconnectors/{dataconnector}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString dataconnectorPathParam("{");
    dataconnectorPathParam.append("dataconnector").append("}");
    fullPath.replace(dataconnectorPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(dataconnector)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorGetCallback);
    connect(this, &OAIDataConnectorsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIDataConnector output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectDataconnectorsDataconnectorGetSignal(output);
        emit projectsProjectDataconnectorsDataconnectorGetSignalFull(worker, output);
    } else {
        emit projectsProjectDataconnectorsDataconnectorGetSignalE(output, error_type, error_str);
        emit projectsProjectDataconnectorsDataconnectorGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorPatch(const QString &project, const QString &dataconnector, const QString &update_mask, const OAIDataConnector &oai_data_connector) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/dataconnectors/{dataconnector}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString dataconnectorPathParam("{");
    dataconnectorPathParam.append("dataconnector").append("}");
    fullPath.replace(dataconnectorPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(dataconnector)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("update_mask")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(update_mask)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    QString output = oai_data_connector.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorPatchCallback);
    connect(this, &OAIDataConnectorsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorPatchCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIDataConnector output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectDataconnectorsDataconnectorPatchSignal(output);
        emit projectsProjectDataconnectorsDataconnectorPatchSignalFull(worker, output);
    } else {
        emit projectsProjectDataconnectorsDataconnectorPatchSignalE(output, error_type, error_str);
        emit projectsProjectDataconnectorsDataconnectorPatchSignalEFull(worker, error_type, error_str);
    }
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectormetricsGet(const QString &project, const QString &dataconnector) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/dataconnectors/{dataconnector}:metrics");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString dataconnectorPathParam("{");
    dataconnectorPathParam.append("dataconnector").append("}");
    fullPath.replace(dataconnectorPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(dataconnector)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectormetricsGetCallback);
    connect(this, &OAIDataConnectorsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectormetricsGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_5 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectDataconnectorsDataconnectormetricsGetSignal(output);
        emit projectsProjectDataconnectorsDataconnectormetricsGetSignalFull(worker, output);
    } else {
        emit projectsProjectDataconnectorsDataconnectormetricsGetSignalE(output, error_type, error_str);
        emit projectsProjectDataconnectorsDataconnectormetricsGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorsyncPost(const QString &project, const QString &dataconnector) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/dataconnectors/{dataconnector}:sync");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    QString dataconnectorPathParam("{");
    dataconnectorPathParam.append("dataconnector").append("}");
    fullPath.replace(dataconnectorPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(dataconnector)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorsyncPostCallback);
    connect(this, &OAIDataConnectorsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsDataconnectorsyncPostCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectDataconnectorsDataconnectorsyncPostSignal();
        emit projectsProjectDataconnectorsDataconnectorsyncPostSignalFull(worker);
    } else {
        emit projectsProjectDataconnectorsDataconnectorsyncPostSignalE(error_type, error_str);
        emit projectsProjectDataconnectorsDataconnectorsyncPostSignalEFull(worker, error_type, error_str);
    }
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsGet(const QString &project, const QString &page_size, const QString &page_token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/dataconnectors");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDataConnectorsApi::projectsProjectDataconnectorsGetCallback);
    connect(this, &OAIDataConnectorsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_4 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectDataconnectorsGetSignal(output);
        emit projectsProjectDataconnectorsGetSignalFull(worker, output);
    } else {
        emit projectsProjectDataconnectorsGetSignalE(output, error_type, error_str);
        emit projectsProjectDataconnectorsGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsPost(const QString &project, const OAIDataConnector &oai_data_connector) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}/dataconnectors");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    QString output = oai_data_connector.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDataConnectorsApi::projectsProjectDataconnectorsPostCallback);
    connect(this, &OAIDataConnectorsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIDataConnectorsApi::projectsProjectDataconnectorsPostCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIDataConnector output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectDataconnectorsPostSignal(output);
        emit projectsProjectDataconnectorsPostSignalFull(worker, output);
    } else {
        emit projectsProjectDataconnectorsPostSignalE(output, error_type, error_str);
        emit projectsProjectDataconnectorsPostSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
