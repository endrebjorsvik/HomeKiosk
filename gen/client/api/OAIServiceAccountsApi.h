/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceAccountsApi_H
#define OAI_OAIServiceAccountsApi_H

#include "OAIHttpRequest.h"

#include "models/OAIInline_response_200_12.h"
#include "models/OAIInline_response_200_13.h"
#include "models/OAIObject.h"
#include "models/OAIServiceAccount.h"
#include "models/OAIServiceAccountKey.h"
#include "models/OAIServiceAccountKeyWithSecret.h"
#include "models/UNKNOWN_BASE_TYPE.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIServiceAccountsApi: public QObject {
    Q_OBJECT

public:
    OAIServiceAccountsApi();
    OAIServiceAccountsApi(const QString& host, const QString& basePath, const int toutMs = 0);
    ~OAIServiceAccountsApi();

    void setBasePath(const QString& basePath);
    void setHost(const QString& host);
    void setApiTimeOutMs(const int tout);
    void addHeaders(const QString& key, const QString& value);
    
    void projectsProjectServiceaccountsGet(const QString& project, const QString& page_size, const QString& page_token);
    void projectsProjectServiceaccountsPost(const QString& project, const UNKNOWN_BASE_TYPE& unknown_base_type);
    void projectsProjectServiceaccountsServiceaccountDelete(const QString& project, const QString& serviceaccount);
    void projectsProjectServiceaccountsServiceaccountGet(const QString& project, const QString& serviceaccount);
    void projectsProjectServiceaccountsServiceaccountKeysGet(const QString& project, const QString& serviceaccount, const QString& page_size, const QString& page_token);
    void projectsProjectServiceaccountsServiceaccountKeysKeyDelete(const QString& project, const QString& serviceaccount, const QString& key);
    void projectsProjectServiceaccountsServiceaccountKeysKeyGet(const QString& project, const QString& serviceaccount, const QString& key);
    void projectsProjectServiceaccountsServiceaccountKeysPost(const QString& project, const QString& serviceaccount, const OAIObject& body);
    void projectsProjectServiceaccountsServiceaccountPatch(const QString& project, const QString& serviceaccount, const QString& update_mask, const OAIServiceAccount& oai_service_account);
    
private:
    QString basePath;
    QString host;
    int timeout;
    QMap<QString, QString> defaultHeaders;
    void projectsProjectServiceaccountsGetCallback (OAIHttpRequestWorker * worker);
    void projectsProjectServiceaccountsPostCallback (OAIHttpRequestWorker * worker);
    void projectsProjectServiceaccountsServiceaccountDeleteCallback (OAIHttpRequestWorker * worker);
    void projectsProjectServiceaccountsServiceaccountGetCallback (OAIHttpRequestWorker * worker);
    void projectsProjectServiceaccountsServiceaccountKeysGetCallback (OAIHttpRequestWorker * worker);
    void projectsProjectServiceaccountsServiceaccountKeysKeyDeleteCallback (OAIHttpRequestWorker * worker);
    void projectsProjectServiceaccountsServiceaccountKeysKeyGetCallback (OAIHttpRequestWorker * worker);
    void projectsProjectServiceaccountsServiceaccountKeysPostCallback (OAIHttpRequestWorker * worker);
    void projectsProjectServiceaccountsServiceaccountPatchCallback (OAIHttpRequestWorker * worker);
    
signals:
    void projectsProjectServiceaccountsGetSignal(OAIInline_response_200_12 summary);
    void projectsProjectServiceaccountsPostSignal(OAIServiceAccount summary);
    void projectsProjectServiceaccountsServiceaccountDeleteSignal();
    void projectsProjectServiceaccountsServiceaccountGetSignal(OAIServiceAccount summary);
    void projectsProjectServiceaccountsServiceaccountKeysGetSignal(OAIInline_response_200_13 summary);
    void projectsProjectServiceaccountsServiceaccountKeysKeyDeleteSignal();
    void projectsProjectServiceaccountsServiceaccountKeysKeyGetSignal(OAIServiceAccountKey summary);
    void projectsProjectServiceaccountsServiceaccountKeysPostSignal(OAIServiceAccountKeyWithSecret summary);
    void projectsProjectServiceaccountsServiceaccountPatchSignal(OAIServiceAccount summary);
    
    void projectsProjectServiceaccountsGetSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_12 summary);
    void projectsProjectServiceaccountsPostSignalFull(OAIHttpRequestWorker* worker, OAIServiceAccount summary);
    void projectsProjectServiceaccountsServiceaccountDeleteSignalFull(OAIHttpRequestWorker* worker);
    void projectsProjectServiceaccountsServiceaccountGetSignalFull(OAIHttpRequestWorker* worker, OAIServiceAccount summary);
    void projectsProjectServiceaccountsServiceaccountKeysGetSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_13 summary);
    void projectsProjectServiceaccountsServiceaccountKeysKeyDeleteSignalFull(OAIHttpRequestWorker* worker);
    void projectsProjectServiceaccountsServiceaccountKeysKeyGetSignalFull(OAIHttpRequestWorker* worker, OAIServiceAccountKey summary);
    void projectsProjectServiceaccountsServiceaccountKeysPostSignalFull(OAIHttpRequestWorker* worker, OAIServiceAccountKeyWithSecret summary);
    void projectsProjectServiceaccountsServiceaccountPatchSignalFull(OAIHttpRequestWorker* worker, OAIServiceAccount summary);
    
    void projectsProjectServiceaccountsGetSignalE(OAIInline_response_200_12 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsPostSignalE(OAIServiceAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountGetSignalE(OAIServiceAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountKeysGetSignalE(OAIInline_response_200_13 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountKeysKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountKeysKeyGetSignalE(OAIServiceAccountKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountKeysPostSignalE(OAIServiceAccountKeyWithSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountPatchSignalE(OAIServiceAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    
    void projectsProjectServiceaccountsGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsPostSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountDeleteSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountKeysGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountKeysKeyDeleteSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountKeysKeyGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountKeysPostSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectServiceaccountsServiceaccountPatchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString error_str);
    
};

}
#endif
