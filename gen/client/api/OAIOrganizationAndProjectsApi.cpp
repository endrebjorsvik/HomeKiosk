/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationAndProjectsApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIOrganizationAndProjectsApi::OAIOrganizationAndProjectsApi() : basePath("/v2"),
    host("api.disruptive-technologies.com"),
    timeout(0){

}

OAIOrganizationAndProjectsApi::~OAIOrganizationAndProjectsApi() {

}

OAIOrganizationAndProjectsApi::OAIOrganizationAndProjectsApi(const QString& host, const QString& basePath, const int tout) {
    this->host = host;
    this->basePath = basePath;
    this->timeout = tout;
}

void OAIOrganizationAndProjectsApi::setBasePath(const QString& basePath){
    this->basePath = basePath;
}

void OAIOrganizationAndProjectsApi::setHost(const QString& host){
    this->host = host;
}

void OAIOrganizationAndProjectsApi::setApiTimeOutMs(const int tout){
    timeout = tout;
}

void OAIOrganizationAndProjectsApi::addHeaders(const QString& key, const QString& value){
    defaultHeaders.insert(key, value);
}


void
OAIOrganizationAndProjectsApi::organizationsGet(const QString& page_size, const QString& page_token) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/organizations");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    worker->setTimeOut(timeout);    
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOrganizationAndProjectsApi::organizationsGetCallback);

    worker->execute(&input);
}

void
OAIOrganizationAndProjectsApi::organizationsGetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_8 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsGetSignal(output);
        emit organizationsGetSignalFull(worker, output);
    } else {
        emit organizationsGetSignalE(output, error_type, error_str);
        emit organizationsGetSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOrganizationAndProjectsApi::organizationsOrganizationGet(const QString& organization) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/organizations/{organization}");
    QString organizationPathParam("{"); 
    organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    worker->setTimeOut(timeout);    
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOrganizationAndProjectsApi::organizationsOrganizationGetCallback);

    worker->execute(&input);
}

void
OAIOrganizationAndProjectsApi::organizationsOrganizationGetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIOrganization output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsOrganizationGetSignal(output);
        emit organizationsOrganizationGetSignalFull(worker, output);
    } else {
        emit organizationsOrganizationGetSignalE(output, error_type, error_str);
        emit organizationsOrganizationGetSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOrganizationAndProjectsApi::projectsGet(const QString& page_size, const QString& page_token, const QString& organization, const QString& query) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/projects");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("organization"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    worker->setTimeOut(timeout);    
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOrganizationAndProjectsApi::projectsGetCallback);

    worker->execute(&input);
}

void
OAIOrganizationAndProjectsApi::projectsGetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_11 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsGetSignal(output);
        emit projectsGetSignalFull(worker, output);
    } else {
        emit projectsGetSignalE(output, error_type, error_str);
        emit projectsGetSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOrganizationAndProjectsApi::projectsPost(const UNKNOWN_BASE_TYPE& unknown_base_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/projects");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    worker->setTimeOut(timeout);    
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = unknown_base_type.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOrganizationAndProjectsApi::projectsPostCallback);

    worker->execute(&input);
}

void
OAIOrganizationAndProjectsApi::projectsPostCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsPostSignal(output);
        emit projectsPostSignalFull(worker, output);
    } else {
        emit projectsPostSignalE(output, error_type, error_str);
        emit projectsPostSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOrganizationAndProjectsApi::projectsProjectDelete(const QString& project) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/projects/{project}");
    QString projectPathParam("{"); 
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    worker->setTimeOut(timeout);    
    OAIHttpRequestInput input(fullPath, "DELETE");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOrganizationAndProjectsApi::projectsProjectDeleteCallback);

    worker->execute(&input);
}

void
OAIOrganizationAndProjectsApi::projectsProjectDeleteCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectDeleteSignal();
        emit projectsProjectDeleteSignalFull(worker);
    } else {
        emit projectsProjectDeleteSignalE(error_type, error_str);
        emit projectsProjectDeleteSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOrganizationAndProjectsApi::projectsProjectGet(const QString& project) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/projects/{project}");
    QString projectPathParam("{"); 
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    worker->setTimeOut(timeout);    
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOrganizationAndProjectsApi::projectsProjectGetCallback);

    worker->execute(&input);
}

void
OAIOrganizationAndProjectsApi::projectsProjectGetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectGetSignal(output);
        emit projectsProjectGetSignalFull(worker, output);
    } else {
        emit projectsProjectGetSignalE(output, error_type, error_str);
        emit projectsProjectGetSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOrganizationAndProjectsApi::projectsProjectPatch(const QString& project, const UNKNOWN_BASE_TYPE& unknown_base_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/projects/{project}");
    QString projectPathParam("{"); 
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    worker->setTimeOut(timeout);    
    OAIHttpRequestInput input(fullPath, "PATCH");

    
    QString output = unknown_base_type.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOrganizationAndProjectsApi::projectsProjectPatchCallback);

    worker->execute(&input);
}

void
OAIOrganizationAndProjectsApi::projectsProjectPatchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectPatchSignal(output);
        emit projectsProjectPatchSignalFull(worker, output);
    } else {
        emit projectsProjectPatchSignalE(output, error_type, error_str);
        emit projectsProjectPatchSignalEFull(worker, error_type, error_str);
    }
}


}
