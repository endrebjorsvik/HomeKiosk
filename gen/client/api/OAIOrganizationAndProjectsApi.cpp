/**
 * API, Disruptive Technologies
 * This api provides access to management, configuration and access to streams of data from Disruptive Technologies sensor solutions. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationAndProjectsApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIOrganizationAndProjectsApi::OAIOrganizationAndProjectsApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAIOrganizationAndProjectsApi::~OAIOrganizationAndProjectsApi() {
}

void OAIOrganizationAndProjectsApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIOrganizationAndProjectsApi::setHost(const QString &host) {
    _host = host;
}

void OAIOrganizationAndProjectsApi::setPort(int port) {
    _port = port;
}

void OAIOrganizationAndProjectsApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIOrganizationAndProjectsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIOrganizationAndProjectsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIOrganizationAndProjectsApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIOrganizationAndProjectsApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIOrganizationAndProjectsApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIOrganizationAndProjectsApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIOrganizationAndProjectsApi::organizationsGet(const QString &page_size, const QString &page_token) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/organizations");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganizationAndProjectsApi::organizationsGetCallback);
    connect(this, &OAIOrganizationAndProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIOrganizationAndProjectsApi::organizationsGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_8 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsGetSignal(output);
        emit organizationsGetSignalFull(worker, output);
    } else {
        emit organizationsGetSignalE(output, error_type, error_str);
        emit organizationsGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIOrganizationAndProjectsApi::organizationsOrganizationGet(const QString &organization) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/organizations/{organization}");
    QString organizationPathParam("{");
    organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganizationAndProjectsApi::organizationsOrganizationGetCallback);
    connect(this, &OAIOrganizationAndProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIOrganizationAndProjectsApi::organizationsOrganizationGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIOrganization output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit organizationsOrganizationGetSignal(output);
        emit organizationsOrganizationGetSignalFull(worker, output);
    } else {
        emit organizationsOrganizationGetSignalE(output, error_type, error_str);
        emit organizationsOrganizationGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIOrganizationAndProjectsApi::projectsGet(const QString &page_size, const QString &page_token, const QString &organization, const QString &query) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_size")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page_token")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_token)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("organization")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganizationAndProjectsApi::projectsGetCallback);
    connect(this, &OAIOrganizationAndProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIOrganizationAndProjectsApi::projectsGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_11 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsGetSignal(output);
        emit projectsGetSignalFull(worker, output);
    } else {
        emit projectsGetSignalE(output, error_type, error_str);
        emit projectsGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIOrganizationAndProjectsApi::projectsPost(const UNKNOWN_BASE_TYPE &unknown_base_type) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects");

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    QString output = unknown_base_type.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganizationAndProjectsApi::projectsPostCallback);
    connect(this, &OAIOrganizationAndProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIOrganizationAndProjectsApi::projectsPostCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsPostSignal(output);
        emit projectsPostSignalFull(worker, output);
    } else {
        emit projectsPostSignalE(output, error_type, error_str);
        emit projectsPostSignalEFull(worker, error_type, error_str);
    }
}

void OAIOrganizationAndProjectsApi::projectsProjectDelete(const QString &project) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganizationAndProjectsApi::projectsProjectDeleteCallback);
    connect(this, &OAIOrganizationAndProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIOrganizationAndProjectsApi::projectsProjectDeleteCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectDeleteSignal();
        emit projectsProjectDeleteSignalFull(worker);
    } else {
        emit projectsProjectDeleteSignalE(error_type, error_str);
        emit projectsProjectDeleteSignalEFull(worker, error_type, error_str);
    }
}

void OAIOrganizationAndProjectsApi::projectsProjectGet(const QString &project) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganizationAndProjectsApi::projectsProjectGetCallback);
    connect(this, &OAIOrganizationAndProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIOrganizationAndProjectsApi::projectsProjectGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectGetSignal(output);
        emit projectsProjectGetSignalFull(worker, output);
    } else {
        emit projectsProjectGetSignalE(output, error_type, error_str);
        emit projectsProjectGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIOrganizationAndProjectsApi::projectsProjectPatch(const QString &project, const UNKNOWN_BASE_TYPE &unknown_base_type) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/projects/{project}");
    QString projectPathParam("{");
    projectPathParam.append("project").append("}");
    fullPath.replace(projectPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    QString output = unknown_base_type.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganizationAndProjectsApi::projectsProjectPatchCallback);
    connect(this, &OAIOrganizationAndProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIOrganizationAndProjectsApi::projectsProjectPatchCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit projectsProjectPatchSignal(output);
        emit projectsProjectPatchSignalFull(worker, output);
    } else {
        emit projectsProjectPatchSignalE(output, error_type, error_str);
        emit projectsProjectPatchSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
